---
name: Build & Deploy Staging
on:
  push:
    branches: [staging]
jobs:
  build-docker-images:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [16]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      #      - name: Setup node env 🏗
      #        uses: actions/setup-node@v2.1.2
      #        with:
      #          node-version: ${{ matrix.node }}

      #      - name: Cache node_modules 📦
      #        uses: actions/cache@v2
      #        with:
      #          path: ~/.npm
      #          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #          restore-keys: |
      #            ${{ runner.os }}-node-

      - name: Get short SHA
        id: sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      #       TODO: RE-ENABLE ONCE SITE IS PROPERLY LIVE
      #      - name: Build and push base image
      #        uses: docker/build-push-action@v2
      #        with:
      #          context: provisioning/base
      #          file: provisioning/base/Dockerfile
      #          platforms: linux/amd64
      #          push: true
      #          no-cache: true
      #          tags: maelstromeous/applications:ps2alerts-website-base

      - name: Build and push staging image
        uses: docker/build-push-action@v2
        with:
          file: provisioning/staging/Dockerfile
          platforms: linux/amd64
          push: true
          no-cache: true
          tags: maelstromeous/applications:ps2alerts-website-staging-${{ steps.sha.outputs.sha_short }}
          build-args: |
            BUILD_SHA=${{ steps.sha.outputs.sha_short }}

  deploy-terraform:
    needs:
      - build-docker-images
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: provisioning/terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get short SHA
        id: sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      # Install the latest version of Terraform CLI and configure the Terraform
      # CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.3.2
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial
      # files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform, with the injected SHA
      - name: Terraform Plan
        run: >
          terraform plan \
            -var='checksum_version=${{ steps.sha.outputs.sha_short }}' \
            -var='app_version=${{ steps.sha.outputs.sha_short }}' \
            -var='dd_api_key=${{ secrets.DATADOG_API_KEY }}' \
            -var='dd_app_key=${{ secrets.DATADOG_APP_KEY }}' \
            -target=module.website_staging -out='.tfout'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

      # Apply the terraform plan and inject the SHA
      - name: Terraform Apply
        if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
        run: terraform apply -auto-approve .tfout
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

  # Unfortunately we need to do this step in order to provision the LE cert manager.
  # Terraform currently doesn't support it :'(
  deploy-cert-manager:
    needs:
      - deploy-terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Save DO kubeconfig
        run: doctl kubernetes cluster kubeconfig save my-cluster

      - name: Apply Lets Encrypt cluster issuer manifest
        run: kubectl apply -f provisioning/staging/k8s/manifests/cluster-issuer.yml
